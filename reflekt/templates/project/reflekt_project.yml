# NOTE - Configs below are required unless flagged with # OPTIONAL comment

name: default_project

config_profile: default_profile  # Profile defined in reflekt_config.yml

# config_path: /absolute/path/to/reflekt_config.yml  # OPTIONAL

tracking_plans:
  naming:
    # For `events:` and `properties:` below:
    #   - Provide one of `casing` or `pattern` (regex).
    #   - Set whether numbers are allowed in event/property names
    events:
      case: title  # One of title|snake|camel
      # pattern: 'your-regex-here'
      allow_numbers: true
      reserved: []  # Reserved event names (casing matters)

    properties:
      case: snake  # One of title|snake|camel
      # pattern: 'your-regex-here'
      allow_numbers: true
      reserved: [] # Reserved property names (casing matters)

  data_types:
    # Specify allowed data types. Available types listed below
    allowed:
      - string
      - integer
      - boolean
      - number
      - object
      - array
      - any
      - 'null'  # Specify null type in quotes

  plan_db_schemas:
    # For each reflekt tracking plan, specify schema in database with raw event data.
    # Replace the example mapping below with your mappings
    example-plan: example_schema

  # OPTIONAL (uncomment `metadata:` block to use)
  # Define a schema for event metadata, this is tested when running
  #     `reflekt test --name <plan-name>`
  # metadata:
  #   schema:
  #     # Example metadata schema
  #     product_owner: John
  #       type: string
  #       required: true
  #     code_owner: Jane
  #       required: true
  #       type: string
  #     stakeholders:
  #       type: string
  #       allowed:
  #         - Product
  #         - Engineering
  #         - Data

dbt:
  sources:
    # Prefix for dbt package sources
    prefix: src_reflekt_

  models:
    # Prefix for dbt package staging models & docs
    prefix: reflekt_
    materialized: incremental  # One of view|incremental
    # OPTIONAL (Required if `materialized: incremental`)
    # `incremental_logic:` specifies incremental logic to use when templating dbt models.
    # This should include the {%- if is_incremental() %} ... {%- endif %} block
    # Article on dbt incremental logic: https://discourse.getdbt.com/t/on-the-limits-of-incrementality/303
    incremental_logic: |
      {%- if is_incremental() %}
      where received_at >= ( select max(received_at_tstamp)::date from {{ this }} )
      {%- endif %}

  # OPTIONAL
  # For each reflekt tracking plan, you can specify the schema where dbt pkg
  # models will be materialized. Uncomment `pkg_db_schemas:` block to use.
  # pkg_db_schemas:
  #   example-plan: example_schema
